"""
Thematic analysis of hotel reviews
Categorizes text fragments by themes: food, room, cleanliness, service, building, location
Output saved in csv-file
"""

import re
import pandas as pd
from tqdm import tqdm
from ast import literal_eval
from collections import defaultdict
import logging
import json

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('topic_modeling.log', encoding='utf-8'), logging.StreamHandler()])
logger = logging.getLogger(__name__)

THEME_KEYWORDS = {
    "еда": [
        "еда", "питание", "меню", "ассортимент", "разнообраз*", "кухня", "кухон*",
        "ресторан*", "кафе", "столов*", "бар*", "буфет*", "завтрак*", "обед*", "ужин*",
        "вкус*", "невкус*", "свеж*", "просроч*", "испорчен*", "тухл*", "качеств* ед*",
        "домашн*", "готов* ед*", "полуфабрикат*", "фастфуд*", "упаковк*", "консерв*",
        "порци*", "подач*", "сервировк*", "заказ* ед*", "овощ*", "фрукт*", "мяс*", "рыб*",
        "салат*", "суп*", "гарнир*", "закус*", "выпечк*", "десерт*", "блюд*", "напит*",
        "алкогол*", "безалкогольн*", "кофе*", "чай*", "шведск* стол", "повар*", "кулинар*",
        "сочн*", "хрустящ*", "ароматн*", "прян*", "деликатес*", "посуд*", "прибор*",
        "ложк*", "вилк*", "нож*", "тарел*", "чаш*", "кружк*", "стакан*", "салфетк*",
        "скатерт*", "подставк*", "сервиз*", "соусник*", "солонк*", "перечниц*", "поднос*",
        "подогрев*", "одноразов* посуд*"],

    "номер": [
        "номер", "апартамент*", "люкс", "студи*", "комнат*", "мебел*", "кроват*",
        "матрас", "подушка", "одеяло", "простыня", "покрывало", "постельное бель*",
        "наматрасник", "балдахин", "диван*", "кресло", "пуф*", "вешалк*", "гардероб*",
        "шкаф*", "комод*", "тумб*", "прикроватн*", "ванн*", "душ*", "джакузи",
        "гидромассаж*", "биде", "туалет*", "унитаз*", "санузел*", "смеситель*",
        "полотенц*", "полотенцесушитель*", "коврик", "туалетн* принадлежност*",
        "гигиенич* принадлежност*", "фен*", "шампун*", "мыл*", "гель",
        "кондиционер для волос", "зубн* набор*", "бритвенн* принадлежност*",
        "ватн* диски", "ватн* палочки", "телевизор*", "кондицион*", "обогреватель*",
        "вентилятор*", "чайник*", "кофемашин*", "мини бар*", "холодильник*",
        "микроволновк*", "интернет*", "роутер*", "розетк*", "зарядн* станц*",
        "будильник*", "радио", "окн*", "панорамн* окн*", "вид из окна",
        "освещен*", "люстр*", "бра", "ночник*", "торшер*", "настольн* лампа*",
        "штор*", "жалюз*", "карниз*", "тюль", "уютн*", "просторн*", "тесн*",
        "маленьк*", "звукоизоляц*", "шумоизоляц*", "теплоизоляц*", "отоплен*",
        "вентиляц*", "влажност*", "ремонт*", "отделк*", "дизайн*", "интерьер*",
        "стил*", "сейф", "электронн* ключ*", "балкон*", "лоджи*", "террас*",
        "веранд*", "коридор*", "прихож*", "гладильн* доск*", "утюг*",
        "сушилк* для белья", "зонт*", "тапочк*", "халат*", "пижам*",
        "детск* кроват*", "колыбель*", "пеленальн*", "рабоч* стол*",
        "офисн* кресл*", "канцеляр* принадлежност*"],

    "чистота": [
        "чист*", "гряз*", "пыл*", "пятн*", "плесен*", "запах*", "уют*", "гигиен*",
        "санитар*", "антисанитар*", "опрятн*", "аккуратн*", "уборк*", "мыть*",
        "помыт*", "вымыт*", "протерт*", "вытер*", "дезинфек*", "обеззараживан*",
        "стерилизац*", "подметан*", "влажн* уборк*", "генеральн* уборк*",
        "ежедневн* уборк*", "моющ* средств*", "чист* средств*", "антисептик*",
        "дезодорант*", "отбеливател*", "пятновыводител*", "жидкост* для мытья",
        "пылесос*", "швабр*", "ведр*", "тряпк*", "губк*", "щетк*", "веник*",
        "смен* бель*", "мусор*", "мусорн* ведр*", "мусорн* пакет*", "отход*",
        "уборщик*", "клининг*", "немыт* посуд*", "засор*", "разлив*", "протек*",
        "паук*", "насеком*", "таракан*", "муравь*", "мыш*", "крыс*", "след* насеком*",
        "затхл*", "застоя*", "ароматизатор*", "освежител* воздух*", "вон*",
        "стандарт* чистот*", "контрол* чистот*", "проверк* на чист*",
        "жалоб* на гряз*", "нарушен* санитар* норм*"],

    "обслуживание": [
        "персонал*", "администратор*", "менеджер*", "консьерж*", "сотрудник*",
        "охранник*", "дежурн*", "гид*", "техническ* персонал*", "супервайзер*",
        "диспетчер*", "координатор*", "аниматор*", "хостес*", "обслуживан*",
        "сервис*", "вежлив*", "груб*", "хамств*", "отзывчив*", "профессионал*",
        "доброжелательн*", "безразлич*", "невнимательн*", "медлен* реагирован*",
        "оперативн*", "качеств* обслуживан*", "уровен* сервис*", "клиентоориентир*",
        "выезд*", "заезд*", "заселен*", "выселен*", "регистрац*", "бронирован*",
        "отмен* брон*", "перенос* брон*", "подтвержден* брон*", "перебронирован*",
        "оплат*", "счёт*", "чек*", "квитанц*", "документ*", "анкет*", "заявк*",
        "акт*", "договор*", "претензи*", "компенсац*", "возврат* денег*",
        "техподдерж*", "помощ*", "консультирован*", "информирован*", "разъяснен*",
        "рекомендац*", "размещен*", "ресепшен*", "конфликт*", "жалоб*",
        "недовольств*", "благодарност*", "похвал*", "отзыв*", "вопрос*",
        "решен*", "ответ*", "уточнен*", "согласован*", "переговоры", "компромисс*",
        "коллектив*", "отношен*", "администрац*", "руководств*", "дирекци*",
        "управлен*", "ошибк* бронирован*", "потер* багаж*", "задержк*",
        "недоразумен*", "перепутан* номер*", "двойн* брон*", "переплат*",
        "недоплат*", "мошенничеств*", "краж*", "пропаж* вещ*", "поврежден* имуществ*",
        "дополнительн* услуг*", "экскурс*", "экскурсовод*"],

    "здание": [
        "здан*", "корпус*", "блок*", "фасад*", "крыш*", "фундамент*", "стен*",
        "перекрыти*", "лестниц*", "ступеньк*", "лестничн* клетк*", "лифт*",
        "эскалатор*", "пандус*", "крыльц*", "вход*", "выход*", "подъезд*", "арка*",
        "вестибюл*", "холл*", "фойе", "лобби", "коридор*", "зона* отдых*",
        "курительн*", "подвал*", "чердак*", "мансард*", "техническ* помещен*",
        "электроснабжен*", "водопровод*", "канализац*", "отоплен*", "пожарн* систем*",
        "охранн* систем*", "видеонаблюден*", "домофон*", "слаб* ток*", "котельн*",
        "террас*", "двор*", "парковк*", "гараж*", "стоянк*", "детск* площадк*",
        "клумб*", "тротуар*", "пешеходн* зон*", "шлагбаум*", "пост охраны",
        "ремонт*", "отделк*", "дизайн*", "архитектур*", "фасадн* отделк*",
        "облицовк*", "декор*", "нов* здан*", "стар* здан*", "аварийн*", "ветх*",
        "капитальн* ремонт*", "косметическ* ремонт*", "современ*", "историческ*",
        "бассейн*", "саун*", "спа*", "тренажерн* зал*", "прачечн*", "химчистк*",
        "массаж*", "конференц-зал*", "переговорн*", "бизнес-центр*"],

    "расположение": [
        "располож*", "месторасположен*", "локац*", "положен*", "адрес*",
        "местоположен*", "центр*", "центр* город*", "окраин*", "пригород*",
        "спальн* район*", "делов* район*", "историческ* центр*", "туристическ* зон*",
        "торгов*", "промышлен* зон*", "жил* зон*", "элитн* район*", "загород*",
        "микрорайон*", "квартал*", "жил* комплекс*", "посёлок*", "деревн*",
        "близост*", "доступн*", "далек*", "недалек*", "рядом", "отдалённ*",
        "пеш* доступност*", "транспортн* доступност*", "удобств* расположен*",
        "изолирован*", "уединённ*", "проходн* двор*", "тих* двор*", "транспорт*",
        "обществен* транспорт*", "метро", "автобус*", "трамва*", "троллейбус*",
        "маршрутк*", "такс*", "стоянк* такс*", "ж/д вокзал*", "автовокзал*",
        "порт*", "аэропорт*", "шоссе", "автострад*", "кольцев* дорог*", "развязк*",
        "остановк*", "вид*", "панорам*", "пейзаж*", "набережн*", "пляж*", "парк*",
        "сквер*", "алле*", "рынок*", "торгов* центр*", "супермаркет*", "аптек*",
        "банк*", "почт*", "достопримечательност*", "музе*", "театр*", "кинотеатр*",
        "выставочн* центр*", "ресторан*", "кафе*", "бар*", "клуб*", "стадион*",
        "школ*", "детск* сад*", "поликлиник*", "больниц*", "природ*", "зелён* зон*",
        "лес*", "река*", "озер*", "водоём*", "гор*", "холм*", "склон*", "обрыв*",
        "берег*", "рощ*", "сад*", "дендрари*", "ботаническ* сад*", "стройк*",
        "промышлен* шум*", "ночн* клуб*", "железн* дорог*", "проспект*", "бульвар*",
        "улиц*", "переулок*", "площад*", "набережн*"]
}


def build_theme_regex():
    """Creates patterns for each theme to match keyword variations"""
    theme_regex = {}
    for theme, keywords in THEME_KEYWORDS.items():
        regex_list = []
        for keyword in keywords:
            base = keyword.replace('*', '')
            pattern = (r"(?:\w+\s+){0,1}" + re.escape(base) + r"\w*" + r"(?:\s+\w+){0,1}")
            regex_list.append(re.compile(pattern, flags=re.IGNORECASE))
        theme_regex[theme] = regex_list
    return theme_regex


THEME_REGEX = build_theme_regex()


def extract_theme_fragments(phrases):
    """Extracts text fragments related to each theme"""
    theme_fragments = defaultdict(list)
    for phrase in phrases:
        if not phrase:
            continue
        if isinstance(phrase, str):
            phrase = [phrase]
        text = ' '.join(phrase)
        for theme, regex_list in THEME_REGEX.items():
            for regex in regex_list:
                matches = regex.findall(text)
                for match in matches:
                    clean = ' '.join(match.split())
                    # Keep only meaningful phrases
                    if len(clean.split()) >= 2 and clean not in theme_fragments[theme]:
                        theme_fragments[theme].append(clean)
    return dict(theme_fragments)


def postprocess_theme_fragments(theme_dict):
    """Post-processes fragments"""
    processed = {}
    for theme, fragments in theme_dict.items():
        unique = []
        for frag in sorted(fragments, key=lambda x: (-len(x), x)):
            if not any(frag in u and frag != u for u in unique):
                unique.append(frag)
        processed[theme] = unique[:3]
    return processed


def analyze_themes(input_file, output_file):
    """Pipeline for theme analysis"""
    try:
        df = pd.read_csv(input_file)
        text_cols = ['text_normalized', 'text_lemmatized']
        for col in text_cols:
            if col in df.columns and isinstance(df[col].iloc[0], str):
                df[col] = df[col].apply(literal_eval)
        tqdm.pandas(desc="Theme analysis")
        df['theme_fragments'] = df['text_lemmatized'].progress_apply(
            lambda x: extract_theme_fragments(x) if isinstance(x, list) else {})
        df['theme_fragments'] = df['theme_fragments'].apply(
            lambda x: postprocess_theme_fragments(x) if x else {})
        df['theme_fragments'] = df['theme_fragments'].apply(
            lambda x: json.dumps(x, ensure_ascii=False))
        df.to_csv(output_file, index=False, encoding='utf-8')
        logger.info(f"Successfully processed {len(df)} reviews")
        return df
    except Exception as e:
        logger.error(f"Processing error: {str(e)}")
        raise
